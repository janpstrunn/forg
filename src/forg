#!/usr/bin/env bash

config="$HOME/.local/share/forg.conf" # Sources filenames and extensions
logs="$HOME/.cache/forg.logs"

DRYMODE=false
KILLDUPLICATE=false
method=""
src_directory=""
output_directory=""

RED="$(tput setaf 196)"
GREEN="$(tput setaf 82)"
BLUE="$(tput setaf 87)"
ORANGE="$(tput setaf 166)"

function text() {
  local color=$1
  local text=$2
  local reset=$(tput sgr0)
  echo -e "${color}${text}${reset}"
}

readonly config

function help() {
  cat <<EOF
File Organizer
Usage: $0 [options] <source-directory> <dest-directory> <method> ...
Options:
  -d, --dry       Preview actions
  -r, --rm        Remove duplicate files
  -h, --help      Show this message
EOF
}

move() {
  find "$src_directory" -type f -print0 | while IFS= read -r -d $'\0' file; do
    filename=$(basename "$file")
    file_tag="${filename%%\-*}"
    extension="${filename##*.}"
    destination_subpath=""

    for method in "${methods[@]}"; do
      case "$method" in
      ftp)
        destination_subpath="${ftp[$extension]}"
        ;;
      *)
        map="${method}"
        eval "destination_subpath=\${$map[\$file_tag]}"
        ;;
      esac
    done

    # Ensure destination_dir is valid
    if [[ -n "$destination_subpath" ]]; then
      destination_dir="$output_directory/$destination_subpath"
    else
      continue
    fi

    if [ ! -d "$destination_dir" ]; then
      mkdir -p "$destination_dir"
    fi

    # Check if the file already exists in the destination
    if [[ -e "$destination_dir/$filename" ]]; then
      if [ "$DRYMODE" = "true" ]; then
        if [ "$KILLDUPLICATE" = "true" ]; then
          text $GREEN "Duplicate file: '$filename' removed"
        else
          text $BLUE "File '$filename' already exists in '$destination_dir'! Possible duplicate?"
        fi
      else
        if [ "$KILLDUPLICATE" = "true" ]; then
          rm "$file"
          text $RED "Duplicate file: '$filename' removed"
        else
          text $BLUE "File '$filename' already exists in '$destination_dir'! Possible duplicate?"
        fi
      fi
      continue
    fi

    # Move the file
    if [ "$DRYMODE" = "true" ]; then
      text $GREEN "Move file: $file ==> $destination_dir"
    else
      if mv -n "$file" "$destination_dir" 2>"$logs"; then
        text $ORANGE "Moved '$filename' to '$destination_dir'"
      else
        text $BLUE "Error moving '$filename' to '$destination_dir'.  Check '$logs' for details." >&2
      fi
    fi
  done
  echo "Complete!"
}

function main() {
  if [ "$DRYMODE" = "true" ]; then
    text $GREEN "Dry Mode:"
  fi
  move
}

while [[ "$1" != "" ]]; do
  case "$1" in
  -d | --dry)
    DRYMODE=true
    shift
    ;;
  -r | --rm)
    KILLDUPLICATE=true
    shift
    ;;
  -dr | -rd)
    DRYMODE=true
    KILLDUPLICATE=true
    shift
    ;;
  -h | --help)
    help
    exit 0
    ;;
  *)
    if [[ -z "$src_directory" ]]; then
      src_directory="$1"
    elif [[ -z "$output_directory" ]]; then
      output_directory="$1"
    else
      methods+=("$1")
    fi
    shift
    ;;
  esac
done

# Check required arguments
if [[ ${#methods[@]} -eq 0 || -z "$src_directory" || -z "$output_directory" ]]; then
  echo "Error: Missing required arguments."
  help
  exit 1
fi

# Same directory warning
if [ "$src_directory" == "$output_directory" ]; then
  text $RED "Be careful! you are running this script in the same directory!"
  echo "if this directory is overpopulated, it may take longer"
  select choice_continue in "yes" "no"; do
    case $choice_continue in
    yes) break ;;
    no) exit 0 ;;
    esac
  done
fi

# check for config files and source them
if [[ ! -f "$config" ]]; then
  echo "error: forg.conf not found.  exiting." >&2
  exit 1
else
  # shellcheck disable=SC1090
  source "$config"
  val=$?
  if [ "$val" -ne 0 ]; then
    echo "failed to source configuration files"
    exit 1
  fi
fi

main
